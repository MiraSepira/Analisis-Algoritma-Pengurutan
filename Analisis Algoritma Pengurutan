#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
using namespace std;

// Bubble Sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; ++i) {
        for (int j = 0; j < n-i-1; ++j) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Insertion Sort
void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            --j;
        }
        arr[j+1] = key;
    }
}

// Selection Sort
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; ++i) {
        int min_idx = i;
        for (int j = i+1; j < n; ++j) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        swap(arr[i], arr[min_idx]);
    }
}

// Merge Sort
void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    
    vector<int> L(n1), R(n2);
    
    for (int i = 0; i < n1; ++i)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[m + 1 + j];
    
    int i = 0, j = 0, k = l;
    
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }
    
    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }
    
    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}

void mergeSort(vector<int>& arr, int l, int r) {
    if (l >= r)
        return;
    
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
}

// Quick Sort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    
    for (int j = low; j < high; ++j) {
        if (arr[j] < pivot) {
            ++i;
            swap(arr[i], arr[j]);
        }
    }
    
    swap(arr[i+1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Utility function to print an array
void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

// Main function
int main() {
    // Generate random data
    srand(time(0));
    vector<int> data;
    int N = 10; // Change this to test different sizes
    
    cout << "Original Array:" << endl;
    for (int i = 0; i < N; ++i) {
        data.push_back(rand() % 100); // Generate random numbers between 0 and 99
        cout << data[i] << " ";
    }
    cout << endl << endl;
    
    // Perform Bubble Sort
    vector<int> bubble_sorted = data;
    bubbleSort(bubble_sorted);
    cout << "Bubble Sort:" << endl;
    printArray(bubble_sorted);
    
    // Perform Insertion Sort
    vector<int> insertion_sorted = data;
    insertionSort(insertion_sorted);
    cout << "Insertion Sort:" << endl;
    printArray(insertion_sorted);
    
    // Perform Selection Sort
    vector<int> selection_sorted = data;
    selectionSort(selection_sorted);
    cout << "Selection Sort:" << endl;
    printArray(selection_sorted);
    
    // Perform Merge Sort
    vector<int> merge_sorted = data;
    mergeSort(merge_sorted, 0, merge_sorted.size() - 1);
    cout << "Merge Sort:" << endl;
    printArray(merge_sorted);
    
    // Perform Quick Sort
    vector<int> quick_sorted = data;
    quickSort(quick_sorted, 0, quick_sorted.size() - 1);
    cout << "Quick Sort:" << endl;
    printArray(quick_sorted);
    
    return 0;
}
